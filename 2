#include<iostream>
using namespace std;

struct TNODE {
	int key;
	TNODE* pLeft;
	TNODE* pRight;
};
typedef TNODE* TREE;

void CreateTree(TREE& T) {   //tao cay rong
	T = NULL;
}

TNODE* CreateTNode(int x) {
	TNODE* p;
	p = new TNODE; //cấp phát vùng nhớ động
	if (p == NULL)

		exit(1); // thoát

	p->key = x; //gán trường dữ liệu của node = x
	p->pLeft = NULL;
	p->pRight = NULL;
	return p;
}

void AddNode(TREE& t, TNODE* p)
{
	if (t)
	{
		if (t->key == p->key)
			return;
		if (p->key < t->key)
			AddNode(t->pLeft, p);
		else
			AddNode(t->pRight, p);
	}
	else
	{
		t = p;
	}
}

void PrintEven(TREE t)
{
	if (t != NULL)
	{
		PrintEven(t->pLeft);
		if (t->key % 2 == 0)
		{
			cout << t->key << " ";
		}
		PrintEven(t->pRight);
	}
}

int CountEven(TREE t)
{
	if (t == NULL)
		return 0;
	int dem = CountEven(t->pLeft);
	if (t->key % 2 == 0)
		dem++;
	dem += CountEven(t->pRight);
	return dem;
}

int SumEven(TREE t)
{
	if (t == NULL)
		return 0;
	int sum = 0;
	if (t->key % 2 == 0)
		sum += t->key;
	sum += SumEven(t->pLeft);
	sum += SumEven(t->pRight);
	return sum;
}

void PrintOdd(TREE t)
{
	if (t != NULL)
	{
		PrintOdd(t->pLeft);
		if (t->key % 2 == 1)
		{
			cout << t->key << " ";
		}
		PrintOdd(t->pRight);
	}
}

int CountOdd(TREE t)
{
	if (t == NULL)
		return 0;
	int dem = CountOdd(t->pLeft);
	if (t->key % 2 == 1)
		dem++;
	dem += CountOdd(t->pRight);
	return dem;
}

int SumOdd(TREE t)
{
	if (t == NULL)
		return 0;
	int sum = 0;
	if (t->key % 2 == 1)
		sum += t->key;
	sum += SumOdd(t->pLeft);
	sum += SumOdd(t->pRight);
	return sum;
}

bool isPrime(int x)
{
	if(x<=1)
		return 0;
	for (int i = 2; i <= sqrt(x); i++)
	{
		if (x % i == 0)
			return 0;
	}
	return 1;
}

void PrintPrime(TREE t)
{
	if (t != NULL)
	{
		PrintPrime(t->pLeft);
		if (isPrime(t->key)==1)
		{
			cout << t->key << " ";
		}
		PrintPrime(t->pRight);
	}
}

int CountPrime(TREE t)
{
	if (t == NULL)
		return 0;
	int dem = CountPrime(t->pLeft);
	if (isPrime(t->key) == 1)
		dem++;
	dem += CountPrime(t->pRight);
	return dem;
}

int SumPrime(TREE t)
{
	if (t == NULL)
		return 0;
	int sum = 0;
	if (isPrime(t->key) == 1)
		sum += t->key;
	sum += SumPrime(t->pLeft);
	sum += SumPrime(t->pRight);
	return sum;
}

int main()
{
	TREE t = NULL;
	CreateTree(t);
	return 0;
}
